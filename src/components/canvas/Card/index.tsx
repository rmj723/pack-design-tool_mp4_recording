/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 NHL_CARD.glb
Created: Thu Feb 23 12:08:09 2023
*/

import React, { useRef, useLayoutEffect, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { Group } from 'three'
import { scroll } from '@/utils/scroll'
import useInteractions from '@/hooks/useInteractions'
import gsap from 'gsap'
import useStore from '@/lib/store'
import useInitCheck from '@/hooks/useInitCheck'
import useRoutingCheck from '@/hooks/useRoutingCheck'
import { isMobile } from 'react-device-detect'
import { between } from '@/utils/math'

export default function Model(props) {
  const { nodes, materials } = useGLTF('/models/card/NHL_CARD.glb')
  const distance = 4
  const index = props.index
  const length = props.length
  const state = useThree()
  const ref = useRef<Group>()
  const y = gsap.utils.wrap((-length / 2) * distance, (length / 2) * distance, -index * distance + scroll.ch)
  const isHome = props.isHome
  const baseX = state.camera.aspect <= 1 ? y : Math.sin((index / length) * Math.PI * 2 + scroll.ch) * 6.5
  const baseZ = state.camera.aspect <= 1 ? -6.5 : -6 + Math.cos((index / length) * Math.PI * 2 + scroll.ch) * 9
  const activeIndex = useStore((state) => state.activeIndex)
  const zThresghold = isMobile ? -6.5 : 2.8
  useInitCheck(ref, props.title, state, isHome)
  useRoutingCheck(ref, isHome)
  const { animate, enter, leave } = useInteractions(ref, props.slug, state, props.title)
  useFrame((state) => {
    if (!ref.current || !props.shouldSpinn) return
    const y = gsap.utils.wrap((-length / 2) * distance, (length / 2) * distance, -index * distance + scroll.ch)
    if (state.camera.aspect <= 1 && isHome) {
      ref.current.position.x = y
      ref.current.position.z = -6.5
    } else if (isHome) {
      ref.current.position.x = Math.sin((index / length) * Math.PI * 2 + scroll.ch) * 6.5
      ref.current.position.z = -6 + Math.cos((index / length) * Math.PI * 2 + scroll.ch) * 9
    }
    if (!isHome && !useStore.getState().isRouting && useStore.getState().reveledPucks.includes(props.title)) {
      ref.current.rotation.y = scroll.cp
      // ref.current.position.=
    }

    if (between(ref.current.position.x, -1, 1) && ref.current.position.z >= zThresghold) {
      setActiveIndex()
    }
  })

  const setActiveIndex = () => {
    if (activeIndex === index) return
    useStore.setState({ activeIndex: index })
  }

  // useLayoutEffect(() => {
  //   if (props.showDetails) {
  //     gsap.fromTo(ref.current.position, { x: 0, y: 0, z: 0 }, { x: -1, y: -2, z: 4, ease: 'expo.out', duration: 1 })
  //   }
  // }, [props.showDetails])

  useLayoutEffect(() => {
    materials.GoldBack.emissiveIntensity = 0.01
    materials.GoldBack.toneMapped = false
    materials.GoldFront.emissiveIntensity = 0.001
    materials.GoldFront.toneMapped = false
    materials.MainImage.emissiveIntensity = 0.001
    materials.MainImage.toneMapped = false
    // materials['Ma_Hockey_Puck.002'].emissiveIntensity = 10
    // materials['Ma_Hockey_Puck.002'].toneMapped = false
  }, [materials])

  return (
    <group
      {...props}
      onClick={(e) => {
        if (ref.current.isAnimating || !props.shouldSpinn) {
          return
        }
        e.stopPropagation()
        document.body.style.cursor = 'default'
        animate()
      }}
      onPointerOver={(e) => {
        if (ref.current.isAnimating || !props.shouldSpinn) {
          return
        }

        e.stopPropagation()
        enter()
      }}
      onPointerOut={(e) => {
        if (ref.current.isAnimating || !props.shouldSpinn) {
          return
        }

        e.stopPropagation()
        leave()
      }}
      scale={[0.3, 0.3, 0.3]}
      position={[baseX, isMobile ? -1.75 : -1.5, baseZ]}
      ref={ref}
      name={props.title}
      dispose={null}>
      <group position={[0.01, 5, 0]}>
        <mesh geometry={nodes.NHL_Card_Gold_2.geometry} material={materials.GoldBack} />
        <mesh geometry={nodes.NHL_Card_Gold.geometry} material={materials.GoldBack} />
        <mesh geometry={nodes.NHL_Card_Metallic.geometry} material={materials.GoldFront} />
        <mesh geometry={nodes.NHL_Card_Main.geometry} material={materials.MainImage} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/card/NHL_CARD.glb')
